// tslint:disable
/**
 * My API
 * API for the app.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/// <reference types="node"/>
import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * Data for the add virtual user call.
 * @export
 * @interface AddVirtualUserData
 */
export interface AddVirtualUserData {
    /**
     * The name of the virtual user.
     * @type {string}
     * @memberof AddVirtualUserData
     */
    name?: string;
}
/**
 * All information of the chore.
 * @export
 * @interface Chore
 */
export interface Chore {
    /**
     * 
     * @type {number}
     * @memberof Chore
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Chore
     */
    created?: string;
    /**
     * The title of the chore
     * @type {string}
     * @memberof Chore
     */
    title?: string;
    /**
     * The description of the chore
     * @type {string}
     * @memberof Chore
     */
    description?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Chore
     */
    isOwner?: boolean;
}
/**
 * A finish of a chore.
 * @export
 * @interface ChoreSummary
 */
export interface ChoreSummary {
    /**
     * 
     * @type {Chore}
     * @memberof ChoreSummary
     */
    chore?: Chore;
    /**
     * 
     * @type {Array<ChoreSummaryArrayEntry>}
     * @memberof ChoreSummary
     */
    doneArray?: Array<ChoreSummaryArrayEntry>;
}
/**
 * A finish of a chore.
 * @export
 * @interface ChoreSummaryArrayEntry
 */
export interface ChoreSummaryArrayEntry {
    /**
     * 
     * @type {number}
     * @memberof ChoreSummaryArrayEntry
     */
    userId?: number;
    /**
     * 
     * @type {number}
     * @memberof ChoreSummaryArrayEntry
     */
    count?: number;
}
/**
 * All information of this finance entry.
 * @export
 * @interface FinanceEntry
 */
export interface FinanceEntry {
    /**
     * 
     * @type {number}
     * @memberof FinanceEntry
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof FinanceEntry
     */
    created?: string;
    /**
     * The title of the entry
     * @type {string}
     * @memberof FinanceEntry
     */
    title?: string;
    /**
     * The user id of the spender.
     * @type {number}
     * @memberof FinanceEntry
     */
    spentFrom?: number;
    /**
     * The user id of the user who inserted this entry.
     * @type {number}
     * @memberof FinanceEntry
     */
    createdBy?: number;
    /**
     * 
     * @type {Array<FinanceEntryEntry>}
     * @memberof FinanceEntry
     */
    spent?: Array<FinanceEntryEntry>;
}
/**
 * The amount spend for the user.
 * @export
 * @interface FinanceEntryEntry
 */
export interface FinanceEntryEntry {
    /**
     * 
     * @type {number}
     * @memberof FinanceEntryEntry
     */
    id?: number;
    /**
     * The user ids the amount was spent for.
     * @type {number}
     * @memberof FinanceEntryEntry
     */
    spentFor?: number;
    /**
     * The amount of money spent.
     * @type {number}
     * @memberof FinanceEntryEntry
     */
    amount?: number;
}
/**
 * All information of this group.
 * @export
 * @interface Group
 */
export interface Group {
    /**
     * 
     * @type {number}
     * @memberof Group
     */
    id?: number;
    /**
     * The name of the group.
     * @type {string}
     * @memberof Group
     */
    name?: string;
    /**
     * The description of the group.
     * @type {string}
     * @memberof Group
     */
    description?: string;
    /**
     * The owner userId of the group.
     * @type {number}
     * @memberof Group
     */
    owner?: number;
    /**
     * the current balance of the user.
     * @type {number}
     * @memberof Group
     */
    balance?: number;
    /**
     * Total spent value of the group.
     * @type {number}
     * @memberof Group
     */
    totalExpenses?: number;
    /**
     * 
     * @type {ImageData}
     * @memberof Group
     */
    image?: ImageData;
    /**
     * 
     * @type {Array<User>}
     * @memberof Group
     */
    users?: Array<User>;
}
/**
 * All data needed for the balance tab.
 * @export
 * @interface GroupBalanceData
 */
export interface GroupBalanceData {
    /**
     * 
     * @type {Array<GroupBalanceDataEntry>}
     * @memberof GroupBalanceData
     */
    userBalances?: Array<GroupBalanceDataEntry>;
}
/**
 * An entry in the group balance data array.
 * @export
 * @interface GroupBalanceDataEntry
 */
export interface GroupBalanceDataEntry {
    /**
     * 
     * @type {number}
     * @memberof GroupBalanceDataEntry
     */
    userId?: number;
    /**
     * 
     * @type {number}
     * @memberof GroupBalanceDataEntry
     */
    balance?: number;
}
/**
 * Data on how to display an image.
 * @export
 * @interface ImageData
 */
export interface ImageData {
    /**
     * 
     * @type {string}
     * @memberof ImageData
     */
    url?: string;
}
/**
 * An invite object.
 * @export
 * @interface Invite
 */
export interface Invite {
    /**
     * 
     * @type {number}
     * @memberof Invite
     */
    id?: number;
    /**
     * 
     * @type {Group}
     * @memberof Invite
     */
    group?: Group;
    /**
     * 
     * @type {string}
     * @memberof Invite
     */
    email?: string;
}
/**
 * All information needed for the login.
 * @export
 * @interface LoginData
 */
export interface LoginData {
    /**
     * email of the user
     * @type {string}
     * @memberof LoginData
     */
    email?: string;
    /**
     * A temporary login token.
     * @type {string}
     * @memberof LoginData
     */
    token?: string;
    /**
     * Random 4 char for easy optical verification within the email.
     * @type {string}
     * @memberof LoginData
     */
    verify?: string;
}
/**
 * Data retrieved after a successful login.
 * @export
 * @interface LoginDataSuccess
 */
export interface LoginDataSuccess {
    /**
     * id of the user
     * @type {number}
     * @memberof LoginDataSuccess
     */
    userId?: number;
    /**
     * The permanent token.
     * @type {string}
     * @memberof LoginDataSuccess
     */
    token?: string;
}
/**
 * Data for the move user data request.
 * @export
 * @interface MoveUserData
 */
export interface MoveUserData {
    /**
     * 
     * @type {number}
     * @memberof MoveUserData
     */
    fromUserId?: number;
    /**
     * 
     * @type {number}
     * @memberof MoveUserData
     */
    toUserId?: number;
    /**
     * 
     * @type {boolean}
     * @memberof MoveUserData
     */
    chores?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MoveUserData
     */
    finance?: boolean;
}
/**
 * Information of the user.
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    id?: number;
    /**
     * email of the user
     * @type {string}
     * @memberof User
     */
    email?: string;
    /**
     * Name of the user
     * @type {string}
     * @memberof User
     */
    name?: string;
    /**
     * Defines if this user is virtual or not.
     * @type {boolean}
     * @memberof User
     */
    isVirtual?: boolean;
    /**
     * 
     * @type {ImageData}
     * @memberof User
     */
    image?: ImageData;
}

/**
 * AutenticationApi - axios parameter creator
 * @export
 */
export const AutenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary This will be called by a user from an email. After this is called, the temporary token linked to this proof is activated.
         * @param {string} secret The secret send to the email.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginGet: async (secret: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secret' is not null or undefined
            if (secret === null || secret === undefined) {
                throw new RequiredError('secret','Required parameter secret was null or undefined when calling loginGet.');
            }
            const localVarPath = `/login`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuthHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            if (secret !== undefined) {
                localVarQueryParameter['secret'] = secret;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary The server will send an approval link per email. After approval the token is valid and linked to the provided email. This token can then be used once to retrieve the permanent token.
         * @param {string} email The email of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginPost: async (email: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling loginPost.');
            }
            const localVarPath = `/login`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuthHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Use this with the temporary token to retrieve the permanent token.
         * @param {string} token The login token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginPut: async (token: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token','Required parameter token was null or undefined when calling loginPut.');
            }
            const localVarPath = `/login`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuthHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AutenticationApi - functional programming interface
 * @export
 */
export const AutenticationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary This will be called by a user from an email. After this is called, the temporary token linked to this proof is activated.
         * @param {string} secret The secret send to the email.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginGet(secret: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await AutenticationApiAxiosParamCreator(configuration).loginGet(secret, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary The server will send an approval link per email. After approval the token is valid and linked to the provided email. This token can then be used once to retrieve the permanent token.
         * @param {string} email The email of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginPost(email: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginData>> {
            const localVarAxiosArgs = await AutenticationApiAxiosParamCreator(configuration).loginPost(email, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Use this with the temporary token to retrieve the permanent token.
         * @param {string} token The login token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginPut(token: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginDataSuccess>> {
            const localVarAxiosArgs = await AutenticationApiAxiosParamCreator(configuration).loginPut(token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AutenticationApi - factory interface
 * @export
 */
export const AutenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary This will be called by a user from an email. After this is called, the temporary token linked to this proof is activated.
         * @param {string} secret The secret send to the email.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginGet(secret: string, options?: any): AxiosPromise<string> {
            return AutenticationApiFp(configuration).loginGet(secret, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary The server will send an approval link per email. After approval the token is valid and linked to the provided email. This token can then be used once to retrieve the permanent token.
         * @param {string} email The email of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginPost(email: string, options?: any): AxiosPromise<LoginData> {
            return AutenticationApiFp(configuration).loginPost(email, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Use this with the temporary token to retrieve the permanent token.
         * @param {string} token The login token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginPut(token: string, options?: any): AxiosPromise<LoginDataSuccess> {
            return AutenticationApiFp(configuration).loginPut(token, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AutenticationApi - object-oriented interface
 * @export
 * @class AutenticationApi
 * @extends {BaseAPI}
 */
export class AutenticationApi extends BaseAPI {
    /**
     * 
     * @summary This will be called by a user from an email. After this is called, the temporary token linked to this proof is activated.
     * @param {string} secret The secret send to the email.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutenticationApi
     */
    public loginGet(secret: string, options?: any) {
        return AutenticationApiFp(this.configuration).loginGet(secret, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary The server will send an approval link per email. After approval the token is valid and linked to the provided email. This token can then be used once to retrieve the permanent token.
     * @param {string} email The email of the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutenticationApi
     */
    public loginPost(email: string, options?: any) {
        return AutenticationApiFp(this.configuration).loginPost(email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Use this with the temporary token to retrieve the permanent token.
     * @param {string} token The login token.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutenticationApi
     */
    public loginPut(token: string, options?: any) {
        return AutenticationApiFp(this.configuration).loginPut(token, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * ChoreApi - axios parameter creator
 * @export
 */
export const ChoreApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes a chore.
         * @param {number} choreId The id of the chore.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        choreChoreIdDelete: async (choreId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'choreId' is not null or undefined
            if (choreId === null || choreId === undefined) {
                throw new RequiredError('choreId','Required parameter choreId was null or undefined when calling choreChoreIdDelete.');
            }
            const localVarPath = `/chore/{choreId}`
                .replace(`{${"choreId"}}`, encodeURIComponent(String(choreId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuthHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes the latest chore entry of the user.
         * @param {number} choreId The id of the chore.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        choreChoreIdEntryDelete: async (choreId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'choreId' is not null or undefined
            if (choreId === null || choreId === undefined) {
                throw new RequiredError('choreId','Required parameter choreId was null or undefined when calling choreChoreIdEntryDelete.');
            }
            const localVarPath = `/chore/{choreId}/entry`
                .replace(`{${"choreId"}}`, encodeURIComponent(String(choreId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuthHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the details of a chore.
         * @param {number} choreId The id of the chore.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        choreChoreIdGet: async (choreId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'choreId' is not null or undefined
            if (choreId === null || choreId === undefined) {
                throw new RequiredError('choreId','Required parameter choreId was null or undefined when calling choreChoreIdGet.');
            }
            const localVarPath = `/chore/{choreId}`
                .replace(`{${"choreId"}}`, encodeURIComponent(String(choreId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuthHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new entry in the chore.
         * @param {number} choreId The id of the chore.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        choreChoreIdPost: async (choreId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'choreId' is not null or undefined
            if (choreId === null || choreId === undefined) {
                throw new RequiredError('choreId','Required parameter choreId was null or undefined when calling choreChoreIdPost.');
            }
            const localVarPath = `/chore/{choreId}`
                .replace(`{${"choreId"}}`, encodeURIComponent(String(choreId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuthHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Exports all chore data as csv
         * @param {number} groupId The id of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        choreExportGroupGroupIdGet: async (groupId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling choreExportGroupGroupIdGet.');
            }
            const localVarPath = `/chore/export/group/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuthHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new chore.
         * @param {number} groupId The id of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chorePost: async (groupId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling chorePost.');
            }
            const localVarPath = `/chore`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuthHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            if (groupId !== undefined) {
                localVarQueryParameter['groupId'] = groupId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates a chore.
         * @param {Chore} chore 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chorePut: async (chore: Chore, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'chore' is not null or undefined
            if (chore === null || chore === undefined) {
                throw new RequiredError('chore','Required parameter chore was null or undefined when calling chorePut.');
            }
            const localVarPath = `/chore`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuthHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof chore !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(chore !== undefined ? chore : {}) : (chore || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the summary of the chore.
         * @param {number} groupId The id of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        choreSummariesGroupIdGet: async (groupId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling choreSummariesGroupIdGet.');
            }
            const localVarPath = `/chore/summaries/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuthHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChoreApi - functional programming interface
 * @export
 */
export const ChoreApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes a chore.
         * @param {number} choreId The id of the chore.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async choreChoreIdDelete(choreId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ChoreApiAxiosParamCreator(configuration).choreChoreIdDelete(choreId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Deletes the latest chore entry of the user.
         * @param {number} choreId The id of the chore.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async choreChoreIdEntryDelete(choreId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ChoreApiAxiosParamCreator(configuration).choreChoreIdEntryDelete(choreId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets the details of a chore.
         * @param {number} choreId The id of the chore.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async choreChoreIdGet(choreId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Chore>> {
            const localVarAxiosArgs = await ChoreApiAxiosParamCreator(configuration).choreChoreIdGet(choreId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Creates a new entry in the chore.
         * @param {number} choreId The id of the chore.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async choreChoreIdPost(choreId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ChoreApiAxiosParamCreator(configuration).choreChoreIdPost(choreId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Exports all chore data as csv
         * @param {number} groupId The id of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async choreExportGroupGroupIdGet(groupId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await ChoreApiAxiosParamCreator(configuration).choreExportGroupGroupIdGet(groupId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Creates a new chore.
         * @param {number} groupId The id of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chorePost(groupId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await ChoreApiAxiosParamCreator(configuration).chorePost(groupId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Updates a chore.
         * @param {Chore} chore 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chorePut(chore: Chore, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ChoreApiAxiosParamCreator(configuration).chorePut(chore, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets the summary of the chore.
         * @param {number} groupId The id of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async choreSummariesGroupIdGet(groupId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ChoreSummary>>> {
            const localVarAxiosArgs = await ChoreApiAxiosParamCreator(configuration).choreSummariesGroupIdGet(groupId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ChoreApi - factory interface
 * @export
 */
export const ChoreApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Deletes a chore.
         * @param {number} choreId The id of the chore.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        choreChoreIdDelete(choreId: number, options?: any): AxiosPromise<void> {
            return ChoreApiFp(configuration).choreChoreIdDelete(choreId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes the latest chore entry of the user.
         * @param {number} choreId The id of the chore.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        choreChoreIdEntryDelete(choreId: number, options?: any): AxiosPromise<void> {
            return ChoreApiFp(configuration).choreChoreIdEntryDelete(choreId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets the details of a chore.
         * @param {number} choreId The id of the chore.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        choreChoreIdGet(choreId: number, options?: any): AxiosPromise<Chore> {
            return ChoreApiFp(configuration).choreChoreIdGet(choreId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a new entry in the chore.
         * @param {number} choreId The id of the chore.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        choreChoreIdPost(choreId: number, options?: any): AxiosPromise<void> {
            return ChoreApiFp(configuration).choreChoreIdPost(choreId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Exports all chore data as csv
         * @param {number} groupId The id of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        choreExportGroupGroupIdGet(groupId: number, options?: any): AxiosPromise<any> {
            return ChoreApiFp(configuration).choreExportGroupGroupIdGet(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a new chore.
         * @param {number} groupId The id of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chorePost(groupId: number, options?: any): AxiosPromise<number> {
            return ChoreApiFp(configuration).chorePost(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates a chore.
         * @param {Chore} chore 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chorePut(chore: Chore, options?: any): AxiosPromise<void> {
            return ChoreApiFp(configuration).chorePut(chore, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets the summary of the chore.
         * @param {number} groupId The id of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        choreSummariesGroupIdGet(groupId: number, options?: any): AxiosPromise<Array<ChoreSummary>> {
            return ChoreApiFp(configuration).choreSummariesGroupIdGet(groupId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChoreApi - object-oriented interface
 * @export
 * @class ChoreApi
 * @extends {BaseAPI}
 */
export class ChoreApi extends BaseAPI {
    /**
     * 
     * @summary Deletes a chore.
     * @param {number} choreId The id of the chore.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChoreApi
     */
    public choreChoreIdDelete(choreId: number, options?: any) {
        return ChoreApiFp(this.configuration).choreChoreIdDelete(choreId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes the latest chore entry of the user.
     * @param {number} choreId The id of the chore.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChoreApi
     */
    public choreChoreIdEntryDelete(choreId: number, options?: any) {
        return ChoreApiFp(this.configuration).choreChoreIdEntryDelete(choreId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets the details of a chore.
     * @param {number} choreId The id of the chore.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChoreApi
     */
    public choreChoreIdGet(choreId: number, options?: any) {
        return ChoreApiFp(this.configuration).choreChoreIdGet(choreId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a new entry in the chore.
     * @param {number} choreId The id of the chore.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChoreApi
     */
    public choreChoreIdPost(choreId: number, options?: any) {
        return ChoreApiFp(this.configuration).choreChoreIdPost(choreId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Exports all chore data as csv
     * @param {number} groupId The id of the group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChoreApi
     */
    public choreExportGroupGroupIdGet(groupId: number, options?: any) {
        return ChoreApiFp(this.configuration).choreExportGroupGroupIdGet(groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a new chore.
     * @param {number} groupId The id of the group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChoreApi
     */
    public chorePost(groupId: number, options?: any) {
        return ChoreApiFp(this.configuration).chorePost(groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates a chore.
     * @param {Chore} chore 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChoreApi
     */
    public chorePut(chore: Chore, options?: any) {
        return ChoreApiFp(this.configuration).chorePut(chore, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets the summary of the chore.
     * @param {number} groupId The id of the group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChoreApi
     */
    public choreSummariesGroupIdGet(groupId: number, options?: any) {
        return ChoreApiFp(this.configuration).choreSummariesGroupIdGet(groupId, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * FinanceApi - axios parameter creator
 * @export
 */
export const FinanceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Exports all chore data as csv
         * @param {number} groupId The id of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeExportGroupGroupIdGet: async (groupId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling financeExportGroupGroupIdGet.');
            }
            const localVarPath = `/finance/export/group/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuthHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Removes the finance entry.
         * @param {number} financeId The id of the finance entry.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeFinanceIdDelete: async (financeId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'financeId' is not null or undefined
            if (financeId === null || financeId === undefined) {
                throw new RequiredError('financeId','Required parameter financeId was null or undefined when calling financeFinanceIdDelete.');
            }
            const localVarPath = `/finance/{financeId}`
                .replace(`{${"financeId"}}`, encodeURIComponent(String(financeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuthHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the details of the specified finance entry.
         * @param {number} financeId The id of the finance entry.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeFinanceIdGet: async (financeId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'financeId' is not null or undefined
            if (financeId === null || financeId === undefined) {
                throw new RequiredError('financeId','Required parameter financeId was null or undefined when calling financeFinanceIdGet.');
            }
            const localVarPath = `/finance/{financeId}`
                .replace(`{${"financeId"}}`, encodeURIComponent(String(financeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuthHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates a finance entry.
         * @param {FinanceEntry} financeEntry 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financePut: async (financeEntry: FinanceEntry, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'financeEntry' is not null or undefined
            if (financeEntry === null || financeEntry === undefined) {
                throw new RequiredError('financeEntry','Required parameter financeEntry was null or undefined when calling financePut.');
            }
            const localVarPath = `/finance`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuthHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof financeEntry !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(financeEntry !== undefined ? financeEntry : {}) : (financeEntry || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the details of all finance entries in this group.
         * @param {number} groupId The id of the group.
         * @param {number} num The max number of entries to return.
         * @param {number} [lastId] If present, entries after this id are returned. Otherwise the newest X are returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupGroupIdFinanceGet: async (groupId: number, num: number, lastId?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupGroupIdFinanceGet.');
            }
            // verify required parameter 'num' is not null or undefined
            if (num === null || num === undefined) {
                throw new RequiredError('num','Required parameter num was null or undefined when calling groupGroupIdFinanceGet.');
            }
            const localVarPath = `/group/{groupId}/finance`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuthHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            if (num !== undefined) {
                localVarQueryParameter['num'] = num;
            }

            if (lastId !== undefined) {
                localVarQueryParameter['lastId'] = lastId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new finance entry in the group.
         * @param {number} groupId The id of the group.
         * @param {FinanceEntry} financeEntry 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupGroupIdFinancePost: async (groupId: number, financeEntry: FinanceEntry, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupGroupIdFinancePost.');
            }
            // verify required parameter 'financeEntry' is not null or undefined
            if (financeEntry === null || financeEntry === undefined) {
                throw new RequiredError('financeEntry','Required parameter financeEntry was null or undefined when calling groupGroupIdFinancePost.');
            }
            const localVarPath = `/group/{groupId}/finance`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuthHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof financeEntry !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(financeEntry !== undefined ? financeEntry : {}) : (financeEntry || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns some title suggestions.
         * @param {number} groupId The id of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupGroupIdFinanceTitleSuggestionsGet: async (groupId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupGroupIdFinanceTitleSuggestionsGet.');
            }
            const localVarPath = `/group/{groupId}/finance/titleSuggestions`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuthHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FinanceApi - functional programming interface
 * @export
 */
export const FinanceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Exports all chore data as csv
         * @param {number} groupId The id of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async financeExportGroupGroupIdGet(groupId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await FinanceApiAxiosParamCreator(configuration).financeExportGroupGroupIdGet(groupId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Removes the finance entry.
         * @param {number} financeId The id of the finance entry.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async financeFinanceIdDelete(financeId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await FinanceApiAxiosParamCreator(configuration).financeFinanceIdDelete(financeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Returns the details of the specified finance entry.
         * @param {number} financeId The id of the finance entry.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async financeFinanceIdGet(financeId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FinanceEntry>> {
            const localVarAxiosArgs = await FinanceApiAxiosParamCreator(configuration).financeFinanceIdGet(financeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Updates a finance entry.
         * @param {FinanceEntry} financeEntry 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async financePut(financeEntry: FinanceEntry, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await FinanceApiAxiosParamCreator(configuration).financePut(financeEntry, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Returns the details of all finance entries in this group.
         * @param {number} groupId The id of the group.
         * @param {number} num The max number of entries to return.
         * @param {number} [lastId] If present, entries after this id are returned. Otherwise the newest X are returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupGroupIdFinanceGet(groupId: number, num: number, lastId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FinanceEntry>>> {
            const localVarAxiosArgs = await FinanceApiAxiosParamCreator(configuration).groupGroupIdFinanceGet(groupId, num, lastId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Creates a new finance entry in the group.
         * @param {number} groupId The id of the group.
         * @param {FinanceEntry} financeEntry 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupGroupIdFinancePost(groupId: number, financeEntry: FinanceEntry, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FinanceEntry>> {
            const localVarAxiosArgs = await FinanceApiAxiosParamCreator(configuration).groupGroupIdFinancePost(groupId, financeEntry, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Returns some title suggestions.
         * @param {number} groupId The id of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupGroupIdFinanceTitleSuggestionsGet(groupId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await FinanceApiAxiosParamCreator(configuration).groupGroupIdFinanceTitleSuggestionsGet(groupId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * FinanceApi - factory interface
 * @export
 */
export const FinanceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Exports all chore data as csv
         * @param {number} groupId The id of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeExportGroupGroupIdGet(groupId: number, options?: any): AxiosPromise<any> {
            return FinanceApiFp(configuration).financeExportGroupGroupIdGet(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Removes the finance entry.
         * @param {number} financeId The id of the finance entry.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeFinanceIdDelete(financeId: number, options?: any): AxiosPromise<void> {
            return FinanceApiFp(configuration).financeFinanceIdDelete(financeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns the details of the specified finance entry.
         * @param {number} financeId The id of the finance entry.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeFinanceIdGet(financeId: number, options?: any): AxiosPromise<FinanceEntry> {
            return FinanceApiFp(configuration).financeFinanceIdGet(financeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates a finance entry.
         * @param {FinanceEntry} financeEntry 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financePut(financeEntry: FinanceEntry, options?: any): AxiosPromise<void> {
            return FinanceApiFp(configuration).financePut(financeEntry, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns the details of all finance entries in this group.
         * @param {number} groupId The id of the group.
         * @param {number} num The max number of entries to return.
         * @param {number} [lastId] If present, entries after this id are returned. Otherwise the newest X are returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupGroupIdFinanceGet(groupId: number, num: number, lastId?: number, options?: any): AxiosPromise<Array<FinanceEntry>> {
            return FinanceApiFp(configuration).groupGroupIdFinanceGet(groupId, num, lastId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a new finance entry in the group.
         * @param {number} groupId The id of the group.
         * @param {FinanceEntry} financeEntry 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupGroupIdFinancePost(groupId: number, financeEntry: FinanceEntry, options?: any): AxiosPromise<FinanceEntry> {
            return FinanceApiFp(configuration).groupGroupIdFinancePost(groupId, financeEntry, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns some title suggestions.
         * @param {number} groupId The id of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupGroupIdFinanceTitleSuggestionsGet(groupId: number, options?: any): AxiosPromise<Array<string>> {
            return FinanceApiFp(configuration).groupGroupIdFinanceTitleSuggestionsGet(groupId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FinanceApi - object-oriented interface
 * @export
 * @class FinanceApi
 * @extends {BaseAPI}
 */
export class FinanceApi extends BaseAPI {
    /**
     * 
     * @summary Exports all chore data as csv
     * @param {number} groupId The id of the group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinanceApi
     */
    public financeExportGroupGroupIdGet(groupId: number, options?: any) {
        return FinanceApiFp(this.configuration).financeExportGroupGroupIdGet(groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Removes the finance entry.
     * @param {number} financeId The id of the finance entry.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinanceApi
     */
    public financeFinanceIdDelete(financeId: number, options?: any) {
        return FinanceApiFp(this.configuration).financeFinanceIdDelete(financeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns the details of the specified finance entry.
     * @param {number} financeId The id of the finance entry.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinanceApi
     */
    public financeFinanceIdGet(financeId: number, options?: any) {
        return FinanceApiFp(this.configuration).financeFinanceIdGet(financeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates a finance entry.
     * @param {FinanceEntry} financeEntry 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinanceApi
     */
    public financePut(financeEntry: FinanceEntry, options?: any) {
        return FinanceApiFp(this.configuration).financePut(financeEntry, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns the details of all finance entries in this group.
     * @param {number} groupId The id of the group.
     * @param {number} num The max number of entries to return.
     * @param {number} [lastId] If present, entries after this id are returned. Otherwise the newest X are returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinanceApi
     */
    public groupGroupIdFinanceGet(groupId: number, num: number, lastId?: number, options?: any) {
        return FinanceApiFp(this.configuration).groupGroupIdFinanceGet(groupId, num, lastId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a new finance entry in the group.
     * @param {number} groupId The id of the group.
     * @param {FinanceEntry} financeEntry 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinanceApi
     */
    public groupGroupIdFinancePost(groupId: number, financeEntry: FinanceEntry, options?: any) {
        return FinanceApiFp(this.configuration).groupGroupIdFinancePost(groupId, financeEntry, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns some title suggestions.
     * @param {number} groupId The id of the group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinanceApi
     */
    public groupGroupIdFinanceTitleSuggestionsGet(groupId: number, options?: any) {
        return FinanceApiFp(this.configuration).groupGroupIdFinanceTitleSuggestionsGet(groupId, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * GeneralApi - axios parameter creator
 * @export
 */
export const GeneralApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns pong.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ping`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuthHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the version of the API endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/version`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuthHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GeneralApi - functional programming interface
 * @export
 */
export const GeneralApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns pong.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pingGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await GeneralApiAxiosParamCreator(configuration).pingGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Returns the version of the API endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async versionGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await GeneralApiAxiosParamCreator(configuration).versionGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * GeneralApi - factory interface
 * @export
 */
export const GeneralApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Returns pong.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingGet(options?: any): AxiosPromise<string> {
            return GeneralApiFp(configuration).pingGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns the version of the API endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionGet(options?: any): AxiosPromise<string> {
            return GeneralApiFp(configuration).versionGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GeneralApi - object-oriented interface
 * @export
 * @class GeneralApi
 * @extends {BaseAPI}
 */
export class GeneralApi extends BaseAPI {
    /**
     * 
     * @summary Returns pong.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralApi
     */
    public pingGet(options?: any) {
        return GeneralApiFp(this.configuration).pingGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns the version of the API endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralApi
     */
    public versionGet(options?: any) {
        return GeneralApiFp(this.configuration).versionGet(options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * GroupApi - axios parameter creator
 * @export
 */
export const GroupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns the details of all groups of the user.
         * @param {number} num The max number of entries to return.
         * @param {number} [lastId] If present, entries after this id are returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupGet: async (num: number, lastId?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'num' is not null or undefined
            if (num === null || num === undefined) {
                throw new RequiredError('num','Required parameter num was null or undefined when calling groupGet.');
            }
            const localVarPath = `/group`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuthHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            if (num !== undefined) {
                localVarQueryParameter['num'] = num;
            }

            if (lastId !== undefined) {
                localVarQueryParameter['lastId'] = lastId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new group.
         * @param {number} groupId The id of the group.
         * @param {AddVirtualUserData} addVirtualUserData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupGroupIdAddVirtualUserPost: async (groupId: number, addVirtualUserData: AddVirtualUserData, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupGroupIdAddVirtualUserPost.');
            }
            // verify required parameter 'addVirtualUserData' is not null or undefined
            if (addVirtualUserData === null || addVirtualUserData === undefined) {
                throw new RequiredError('addVirtualUserData','Required parameter addVirtualUserData was null or undefined when calling groupGroupIdAddVirtualUserPost.');
            }
            const localVarPath = `/group/{groupId}/addVirtualUser`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuthHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof addVirtualUserData !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(addVirtualUserData !== undefined ? addVirtualUserData : {}) : (addVirtualUserData || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the data for the balance tab.
         * @param {number} groupId The id of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupGroupIdBalanceGet: async (groupId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupGroupIdBalanceGet.');
            }
            const localVarPath = `/group/{groupId}/balance`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuthHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Removes the group.
         * @param {number} groupId The id of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupGroupIdDelete: async (groupId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupGroupIdDelete.');
            }
            const localVarPath = `/group/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuthHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the details of the specified group.
         * @param {number} groupId The id of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupGroupIdGet: async (groupId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupGroupIdGet.');
            }
            const localVarPath = `/group/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuthHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates a group.
         * @param {number} groupId The id of the group.
         * @param {MoveUserData} moveUserData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupGroupIdMoveUserDataPut: async (groupId: number, moveUserData: MoveUserData, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupGroupIdMoveUserDataPut.');
            }
            // verify required parameter 'moveUserData' is not null or undefined
            if (moveUserData === null || moveUserData === undefined) {
                throw new RequiredError('moveUserData','Required parameter moveUserData was null or undefined when calling groupGroupIdMoveUserDataPut.');
            }
            const localVarPath = `/group/{groupId}/moveUserData`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuthHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof moveUserData !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(moveUserData !== undefined ? moveUserData : {}) : (moveUserData || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns all open invites of this group.
         * @param {number} groupId The id of the invite.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupInviteGroupIdGet: async (groupId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupInviteGroupIdGet.');
            }
            const localVarPath = `/group/invite/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuthHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Removes an invite from the group.
         * @param {number} inviteId The id of the invite.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupInviteInviteIdDelete: async (inviteId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inviteId' is not null or undefined
            if (inviteId === null || inviteId === undefined) {
                throw new RequiredError('inviteId','Required parameter inviteId was null or undefined when calling groupInviteInviteIdDelete.');
            }
            const localVarPath = `/group/invite/{inviteId}`
                .replace(`{${"inviteId"}}`, encodeURIComponent(String(inviteId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuthHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupPost: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/group`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuthHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates a group.
         * @param {Group} group 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupPut: async (group: Group, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling groupPut.');
            }
            const localVarPath = `/group`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuthHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof group !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(group !== undefined ? group : {}) : (group || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GroupApi - functional programming interface
 * @export
 */
export const GroupApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns the details of all groups of the user.
         * @param {number} num The max number of entries to return.
         * @param {number} [lastId] If present, entries after this id are returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupGet(num: number, lastId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Group>>> {
            const localVarAxiosArgs = await GroupApiAxiosParamCreator(configuration).groupGet(num, lastId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Creates a new group.
         * @param {number} groupId The id of the group.
         * @param {AddVirtualUserData} addVirtualUserData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupGroupIdAddVirtualUserPost(groupId: number, addVirtualUserData: AddVirtualUserData, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await GroupApiAxiosParamCreator(configuration).groupGroupIdAddVirtualUserPost(groupId, addVirtualUserData, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Returns the data for the balance tab.
         * @param {number} groupId The id of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupGroupIdBalanceGet(groupId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupBalanceData>> {
            const localVarAxiosArgs = await GroupApiAxiosParamCreator(configuration).groupGroupIdBalanceGet(groupId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Removes the group.
         * @param {number} groupId The id of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupGroupIdDelete(groupId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await GroupApiAxiosParamCreator(configuration).groupGroupIdDelete(groupId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Returns the details of the specified group.
         * @param {number} groupId The id of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupGroupIdGet(groupId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>> {
            const localVarAxiosArgs = await GroupApiAxiosParamCreator(configuration).groupGroupIdGet(groupId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Updates a group.
         * @param {number} groupId The id of the group.
         * @param {MoveUserData} moveUserData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupGroupIdMoveUserDataPut(groupId: number, moveUserData: MoveUserData, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await GroupApiAxiosParamCreator(configuration).groupGroupIdMoveUserDataPut(groupId, moveUserData, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Returns all open invites of this group.
         * @param {number} groupId The id of the invite.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupInviteGroupIdGet(groupId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Invite>>> {
            const localVarAxiosArgs = await GroupApiAxiosParamCreator(configuration).groupInviteGroupIdGet(groupId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Removes an invite from the group.
         * @param {number} inviteId The id of the invite.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupInviteInviteIdDelete(inviteId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await GroupApiAxiosParamCreator(configuration).groupInviteInviteIdDelete(inviteId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Creates a new group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupPost(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await GroupApiAxiosParamCreator(configuration).groupPost(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Updates a group.
         * @param {Group} group 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupPut(group: Group, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await GroupApiAxiosParamCreator(configuration).groupPut(group, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * GroupApi - factory interface
 * @export
 */
export const GroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Returns the details of all groups of the user.
         * @param {number} num The max number of entries to return.
         * @param {number} [lastId] If present, entries after this id are returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupGet(num: number, lastId?: number, options?: any): AxiosPromise<Array<Group>> {
            return GroupApiFp(configuration).groupGet(num, lastId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a new group.
         * @param {number} groupId The id of the group.
         * @param {AddVirtualUserData} addVirtualUserData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupGroupIdAddVirtualUserPost(groupId: number, addVirtualUserData: AddVirtualUserData, options?: any): AxiosPromise<void> {
            return GroupApiFp(configuration).groupGroupIdAddVirtualUserPost(groupId, addVirtualUserData, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns the data for the balance tab.
         * @param {number} groupId The id of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupGroupIdBalanceGet(groupId: number, options?: any): AxiosPromise<GroupBalanceData> {
            return GroupApiFp(configuration).groupGroupIdBalanceGet(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Removes the group.
         * @param {number} groupId The id of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupGroupIdDelete(groupId: number, options?: any): AxiosPromise<void> {
            return GroupApiFp(configuration).groupGroupIdDelete(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns the details of the specified group.
         * @param {number} groupId The id of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupGroupIdGet(groupId: number, options?: any): AxiosPromise<Group> {
            return GroupApiFp(configuration).groupGroupIdGet(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates a group.
         * @param {number} groupId The id of the group.
         * @param {MoveUserData} moveUserData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupGroupIdMoveUserDataPut(groupId: number, moveUserData: MoveUserData, options?: any): AxiosPromise<void> {
            return GroupApiFp(configuration).groupGroupIdMoveUserDataPut(groupId, moveUserData, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns all open invites of this group.
         * @param {number} groupId The id of the invite.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupInviteGroupIdGet(groupId: number, options?: any): AxiosPromise<Array<Invite>> {
            return GroupApiFp(configuration).groupInviteGroupIdGet(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Removes an invite from the group.
         * @param {number} inviteId The id of the invite.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupInviteInviteIdDelete(inviteId: number, options?: any): AxiosPromise<void> {
            return GroupApiFp(configuration).groupInviteInviteIdDelete(inviteId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a new group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupPost(options?: any): AxiosPromise<number> {
            return GroupApiFp(configuration).groupPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates a group.
         * @param {Group} group 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupPut(group: Group, options?: any): AxiosPromise<void> {
            return GroupApiFp(configuration).groupPut(group, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GroupApi - object-oriented interface
 * @export
 * @class GroupApi
 * @extends {BaseAPI}
 */
export class GroupApi extends BaseAPI {
    /**
     * 
     * @summary Returns the details of all groups of the user.
     * @param {number} num The max number of entries to return.
     * @param {number} [lastId] If present, entries after this id are returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public groupGet(num: number, lastId?: number, options?: any) {
        return GroupApiFp(this.configuration).groupGet(num, lastId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a new group.
     * @param {number} groupId The id of the group.
     * @param {AddVirtualUserData} addVirtualUserData 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public groupGroupIdAddVirtualUserPost(groupId: number, addVirtualUserData: AddVirtualUserData, options?: any) {
        return GroupApiFp(this.configuration).groupGroupIdAddVirtualUserPost(groupId, addVirtualUserData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns the data for the balance tab.
     * @param {number} groupId The id of the group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public groupGroupIdBalanceGet(groupId: number, options?: any) {
        return GroupApiFp(this.configuration).groupGroupIdBalanceGet(groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Removes the group.
     * @param {number} groupId The id of the group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public groupGroupIdDelete(groupId: number, options?: any) {
        return GroupApiFp(this.configuration).groupGroupIdDelete(groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns the details of the specified group.
     * @param {number} groupId The id of the group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public groupGroupIdGet(groupId: number, options?: any) {
        return GroupApiFp(this.configuration).groupGroupIdGet(groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates a group.
     * @param {number} groupId The id of the group.
     * @param {MoveUserData} moveUserData 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public groupGroupIdMoveUserDataPut(groupId: number, moveUserData: MoveUserData, options?: any) {
        return GroupApiFp(this.configuration).groupGroupIdMoveUserDataPut(groupId, moveUserData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns all open invites of this group.
     * @param {number} groupId The id of the invite.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public groupInviteGroupIdGet(groupId: number, options?: any) {
        return GroupApiFp(this.configuration).groupInviteGroupIdGet(groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Removes an invite from the group.
     * @param {number} inviteId The id of the invite.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public groupInviteInviteIdDelete(inviteId: number, options?: any) {
        return GroupApiFp(this.configuration).groupInviteInviteIdDelete(inviteId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a new group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public groupPost(options?: any) {
        return GroupApiFp(this.configuration).groupPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates a group.
     * @param {Group} group 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public groupPut(group: Group, options?: any) {
        return GroupApiFp(this.configuration).groupPut(group, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Adds the user to this group if an invite is pending.
         * @param {number} groupId The id of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupGroupIdJoinPut: async (groupId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupGroupIdJoinPut.');
            }
            const localVarPath = `/group/{groupId}/join`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuthHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Invites a user to this group.
         * @param {number} groupId The id of the group.
         * @param {string} email The email of the new user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupGroupIdUserEmailPut: async (groupId: number, email: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupGroupIdUserEmailPut.');
            }
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling groupGroupIdUserEmailPut.');
            }
            const localVarPath = `/group/{groupId}/user/{email}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuthHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Removes a user from the group.
         * @param {number} groupId The id of the group.
         * @param {number} userId The id of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupGroupIdUserUserIdDelete: async (groupId: number, userId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupGroupIdUserUserIdDelete.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling groupGroupIdUserUserIdDelete.');
            }
            const localVarPath = `/group/{groupId}/user/{userId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuthHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Links the firebase token to this user.
         * @param {string} firebaseToken The firebase token of this device.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userFirebaseTokenPut: async (firebaseToken: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'firebaseToken' is not null or undefined
            if (firebaseToken === null || firebaseToken === undefined) {
                throw new RequiredError('firebaseToken','Required parameter firebaseToken was null or undefined when calling userFirebaseTokenPut.');
            }
            const localVarPath = `/user/firebaseToken`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuthHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            if (firebaseToken !== undefined) {
                localVarQueryParameter['firebaseToken'] = firebaseToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns user information of the current user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/user`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuthHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns all open invites of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userInviteGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/invite`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuthHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Modifies the user information of this user if permitted.
         * @param {User} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userPut: async (user: User, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user','Required parameter user was null or undefined when calling userPut.');
            }
            const localVarPath = `/user`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuthHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof user !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(user !== undefined ? user : {}) : (user || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Resets the api key of the user. This results in a logout on all devices.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userResetApiKeyPut: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/resetApiKey`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuthHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Adds the user to this group if an invite is pending.
         * @param {number} groupId The id of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupGroupIdJoinPut(groupId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).groupGroupIdJoinPut(groupId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Invites a user to this group.
         * @param {number} groupId The id of the group.
         * @param {string} email The email of the new user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupGroupIdUserEmailPut(groupId: number, email: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).groupGroupIdUserEmailPut(groupId, email, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Removes a user from the group.
         * @param {number} groupId The id of the group.
         * @param {number} userId The id of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupGroupIdUserUserIdDelete(groupId: number, userId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).groupGroupIdUserUserIdDelete(groupId, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Links the firebase token to this user.
         * @param {string} firebaseToken The firebase token of this device.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userFirebaseTokenPut(firebaseToken: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).userFirebaseTokenPut(firebaseToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Returns user information of the current user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).userGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Returns all open invites of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userInviteGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Invite>>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).userInviteGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Modifies the user information of this user if permitted.
         * @param {User} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userPut(user: User, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).userPut(user, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Resets the api key of the user. This results in a logout on all devices.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userResetApiKeyPut(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).userResetApiKeyPut(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Adds the user to this group if an invite is pending.
         * @param {number} groupId The id of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupGroupIdJoinPut(groupId: number, options?: any): AxiosPromise<void> {
            return UserApiFp(configuration).groupGroupIdJoinPut(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Invites a user to this group.
         * @param {number} groupId The id of the group.
         * @param {string} email The email of the new user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupGroupIdUserEmailPut(groupId: number, email: string, options?: any): AxiosPromise<void> {
            return UserApiFp(configuration).groupGroupIdUserEmailPut(groupId, email, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Removes a user from the group.
         * @param {number} groupId The id of the group.
         * @param {number} userId The id of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupGroupIdUserUserIdDelete(groupId: number, userId: number, options?: any): AxiosPromise<void> {
            return UserApiFp(configuration).groupGroupIdUserUserIdDelete(groupId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Links the firebase token to this user.
         * @param {string} firebaseToken The firebase token of this device.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userFirebaseTokenPut(firebaseToken: string, options?: any): AxiosPromise<void> {
            return UserApiFp(configuration).userFirebaseTokenPut(firebaseToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns user information of the current user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userGet(options?: any): AxiosPromise<User> {
            return UserApiFp(configuration).userGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns all open invites of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userInviteGet(options?: any): AxiosPromise<Array<Invite>> {
            return UserApiFp(configuration).userInviteGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Modifies the user information of this user if permitted.
         * @param {User} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userPut(user: User, options?: any): AxiosPromise<void> {
            return UserApiFp(configuration).userPut(user, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Resets the api key of the user. This results in a logout on all devices.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userResetApiKeyPut(options?: any): AxiosPromise<void> {
            return UserApiFp(configuration).userResetApiKeyPut(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary Adds the user to this group if an invite is pending.
     * @param {number} groupId The id of the group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public groupGroupIdJoinPut(groupId: number, options?: any) {
        return UserApiFp(this.configuration).groupGroupIdJoinPut(groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Invites a user to this group.
     * @param {number} groupId The id of the group.
     * @param {string} email The email of the new user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public groupGroupIdUserEmailPut(groupId: number, email: string, options?: any) {
        return UserApiFp(this.configuration).groupGroupIdUserEmailPut(groupId, email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Removes a user from the group.
     * @param {number} groupId The id of the group.
     * @param {number} userId The id of the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public groupGroupIdUserUserIdDelete(groupId: number, userId: number, options?: any) {
        return UserApiFp(this.configuration).groupGroupIdUserUserIdDelete(groupId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Links the firebase token to this user.
     * @param {string} firebaseToken The firebase token of this device.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userFirebaseTokenPut(firebaseToken: string, options?: any) {
        return UserApiFp(this.configuration).userFirebaseTokenPut(firebaseToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns user information of the current user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userGet(options?: any) {
        return UserApiFp(this.configuration).userGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns all open invites of the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userInviteGet(options?: any) {
        return UserApiFp(this.configuration).userInviteGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Modifies the user information of this user if permitted.
     * @param {User} user 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userPut(user: User, options?: any) {
        return UserApiFp(this.configuration).userPut(user, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Resets the api key of the user. This results in a logout on all devices.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userResetApiKeyPut(options?: any) {
        return UserApiFp(this.configuration).userResetApiKeyPut(options).then((request) => request(this.axios, this.basePath));
    }

}


